openapi: 3.0.3
info:
  title: Qazna API
  version: "v1"
  description: |
    Qazna.org â€” minimal double-entry ledger API (MVP).
    Idempotent transfers via `Idempotency-Key` header or body field.

servers:
  - url: http://localhost:8080
    description: Local dev

tags:
  - name: System
  - name: Auth
  - name: Accounts
  - name: Ledger
  - name: RBAC

paths:
  /healthz:
    get:
      tags: [System]
      summary: Health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  service: { type: string, example: qazna-api }
                  version: { type: string, example: 0.3.0 }

  /v1/info:
    get:
      tags: [System]
      summary: Service info
      responses:
        "200":
          description: Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: { type: string }
                  version: { type: string }
                  time: { type: string, format: date-time }

  /v1/auth/token:
    post:
      tags: [Auth]
      summary: Issue demo token
      description: |
        Issues a JSON Web Token (JWT) signed with RS256 for demo purposes. Include the desired roles in the request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenIssueRequest"
      responses:
        "200":
          description: Token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIssueResponse"
        "400":
          description: Invalid request

  /v1/auth/oauth/authorize:
    post:
      tags: [Auth]
      summary: Issue authorization code (PKCE)
      description: Issues a short-lived authorization code for an OAuth client using PKCE. This endpoint is for demo purposes and accepts user/roles payloads directly.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthAuthorizeRequest"
      responses:
        "200":
          description: Authorization code response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthCodeResponse"
        "400":
          description: Invalid request

  /v1/auth/oauth/token:
    post:
      tags: [Auth]
      summary: Exchange authorization code for token
      description: Exchanges a PKCE authorization code for an RS256 JWT access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthTokenRequest"
      responses:
        "200":
          description: Token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIssueResponse"
        "400":
          description: Invalid request

  /v1/auth/jwks:
    get:
      tags: [Auth]
      summary: JWKS document
      description: Returns the JSON Web Key Set containing active and recently rotated RSA public keys.
      responses:
        "200":
          description: JWKS payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWKS"

  /v1/accounts:
    post:
      tags: [Accounts]
      summary: Create account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Bad request

  /v1/accounts/{id}:
    get:
      tags: [Accounts]
      summary: Get account by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "404":
          description: Not found

  /v1/accounts/{id}/balance:
    get:
      tags: [Accounts]
      summary: Get balance for currency
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: currency
          required: true
          schema: { type: string, example: QZN }
      responses:
        "200":
          description: Balance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Money"
        "404":
          description: Not found

  /v1/transfers:
    post:
      tags: [Ledger]
      summary: Transfer funds (idempotent)
      description: |
        Idempotency supported via either:
        - `Idempotency-Key` HTTP header (preferred), or
        - `idempotency_key` field in request body.

      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string }
          description: Idempotency key

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"

      responses:
        "201":
          description: Transfer accepted
          headers:
            Idempotency-Key:
              schema: { type: string }
              description: Echoes idempotency key when provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid amount/currency
        "404":
          description: Account not found
        "409":
          description: Insufficient funds
      security:
        - bearerAuth: []

  /v1/ledger/transactions:
    get:
      tags: [Ledger]
      summary: List transactions (paginated by sequence)
      parameters:
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - in: query
          name: after
          required: false
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
                  next_after:
                    type: integer
                    example: 42
                  as_of:
                    type: string
                    format: date-time

  /v1/organizations:
    post:
      tags: [RBAC]
      summary: Create organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          description: Invalid request
        "403":
          description: Missing permission

  /v1/organizations/{organization_id}/users:
    post:
      tags: [RBAC]
      summary: Create user within organization
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: organization_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request
        "403":
          description: Missing permission
        "404":
          description: Organization not found
        "409":
          description: Email already exists

  /v1/organizations/{organization_id}/roles:
    post:
      tags: [RBAC]
      summary: Create role within organization
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: organization_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Invalid request
        "403":
          description: Missing permission
        "404":
          description: Organization not found
        "409":
          description: Role already exists

  /v1/roles/{role_id}/permissions:
    put:
      tags: [RBAC]
      summary: Replace role permissions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: role_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRolePermissionsRequest"
      responses:
        "204":
          description: Updated
        "400":
          description: Invalid request
        "403":
          description: Missing permission
        "404":
          description: Role or permission not found

  /v1/users/{user_id}/assignments:
    post:
      tags: [RBAC]
      summary: Assign role to user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignRoleRequest"
      responses:
        "201":
          description: Assignment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleAssignment"
        "400":
          description: Invalid request
        "403":
          description: Missing permission
        "404":
          description: User or role not found
        "409":
          description: Assignment already exists

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JSON Web Token issued by `/v1/auth/token`.

  schemas:
    TokenIssueRequest:
      type: object
      properties:
        user:
          type: string
          example: demo
        roles:
          type: array
          items:
            type: string
          example: [admin]
      required: [user, roles]

    TokenIssueResponse:
      type: object
      properties:
        token: { type: string }
        expires_at: { type: string, format: date-time }

    OAuthAuthorizeRequest:
      type: object
      properties:
        client_id: { type: string }
        redirect_uri: { type: string, format: uri }
        code_challenge: { type: string }
        code_challenge_method:
          type: string
          enum: [S256, plain]
        user: { type: string }
        roles:
          type: array
          items:
            type: string
      required: [client_id, redirect_uri, code_challenge, user, roles]

    AuthCodeResponse:
      type: object
      properties:
        code: { type: string }
        redirect_uri: { type: string, format: uri }
        expires_at: { type: string, format: date-time }

    OAuthTokenRequest:
      type: object
      properties:
        client_id: { type: string }
        client_secret: { type: string }
        code: { type: string }
        code_verifier: { type: string }
      required: [client_id, code, code_verifier]

    JWKS:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty: { type: string, example: RSA }
              kid: { type: string }
              use: { type: string, example: sig }
              alg: { type: string, example: RS256 }
              n:   { type: string, description: Base64URL modulus }
              e:   { type: string, description: Base64URL exponent }

    Money:
      type: object
      properties:
        currency: { type: string, example: QZN }
        amount:   { type: integer, example: 1000 }
      required: [currency, amount]

    Account:
      type: object
      properties:
        id:         { type: string, example: "eac452f0c532e3ba1f4280e8a2bceb78" }
        created_at: { type: string, format: date-time }
        balances:
          type: object
          additionalProperties:
            type: integer
          example: { QZN: 100000 }
      required: [id, created_at, balances]

    Transaction:
      type: object
      properties:
        id:              { type: string }
        created_at:      { type: string, format: date-time }
        from_account_id: { type: string }
        to_account_id:   { type: string }
        currency:        { type: string }
        amount:          { type: integer }
        idempotency_key: { type: string, nullable: true }
        sequence:        { type: integer }
      required: [id, created_at, from_account_id, to_account_id, currency, amount, sequence]

    CreateAccountRequest:
      type: object
      properties:
        currency:       { type: string, example: QZN }
        initial_amount: { type: integer, example: 100000 }
      required: [currency, initial_amount]

    TransferRequest:
      type: object
      properties:
        from_id:         { type: string }
        to_id:           { type: string }
        currency:        { type: string, example: QZN }
        amount:          { type: integer, example: 25000 }
        idempotency_key: { type: string, nullable: true }
      required: [from_id, to_id, currency, amount]

    CreateOrganizationRequest:
      type: object
      properties:
        name: { type: string, example: "Central Clearing House" }
        metadata:
          type: object
          additionalProperties: {}
      required: [name]

    Organization:
      type: object
      properties:
        id:         { type: string, example: org-123 }
        name:       { type: string }
        metadata:
          type: object
          additionalProperties: {}
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      required: [id, name, created_at, updated_at]

    CreateUserRequest:
      type: object
      properties:
        email:    { type: string, format: email }
        password: { type: string, format: password }
        status:
          type: string
          enum: [active, disabled]
      required: [email, password]

    User:
      type: object
      properties:
        id:              { type: string }
        organization_id: { type: string }
        email:           { type: string, format: email }
        status:
          type: string
          enum: [active, disabled]
        created_at:      { type: string, format: date-time }
        updated_at:      { type: string, format: date-time }
      required: [id, organization_id, email, status, created_at, updated_at]

    CreateRoleRequest:
      type: object
      properties:
        name:        { type: string, example: treasury_operator }
        description: { type: string }
      required: [name]

    Role:
      type: object
      properties:
        id:              { type: string }
        organization_id: { type: string }
        name:            { type: string }
        description:     { type: string, nullable: true }
        created_at:      { type: string, format: date-time }
        updated_at:      { type: string, format: date-time }
      required: [id, organization_id, name, created_at, updated_at]

    UpdateRolePermissionsRequest:
      type: object
      properties:
        permissions:
          type: array
          items: { type: string }
      required: [permissions]

    AssignRoleRequest:
      type: object
      properties:
        role_id: { type: string }
      required: [role_id]

    UserRoleAssignment:
      type: object
      properties:
        user_id:         { type: string }
        role_id:         { type: string }
        organization_id: { type: string }
        created_at:      { type: string, format: date-time }
      required: [user_id, role_id, organization_id, created_at]
